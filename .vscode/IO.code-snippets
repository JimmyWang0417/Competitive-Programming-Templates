{
      "OI fast edition": {
            "prefix": "IO",
            "body": [
                  "/**",
                  " *    name:     ${1:${CLIPBOARD}}",
                  //" *    name:    ${1:${TM_FILENAME_BASE}}",
                  " *    author:   JimmyWang0417 (蒟蒻wjr)",
                  " *    located:  Beilin District, Xi'an City, Shaanxi Province, China",
                  " *    created:  $CURRENT_YEAR.$CURRENT_MONTH.$CURRENT_DATE $CURRENT_DAY_NAME_SHORT $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND (Asia/Shanghai)",
                  " *    unicode:  UTF-8",
                  " *    standard: c++17",
                  " **/",
                  "${2|#include <bits\/stdc++.h>,#include <bits\/extc++.h>, #include <cstdio>|}",
                  "typedef long long ll;",
                  "typedef unsigned long long ull;",
                  "#define lowbit(x) ((x) & (-(x)))",
                  "",
                  "${3:// #define FAST_IO}",
                  "",
                  "#if !defined(WIN32) && !defined(_WIN32)",
                  "#define getchar getchar_unlocked",
                  "#define putchar putchar_unlocked",
                  "#endif",
                  "namespace IO",
                  "{",
                  "#ifdef FAST_IO",
                  "#ifndef FAST_IN",
                  "#define FAST_IN",
                  "#endif",
                  "#ifndef FAST_OUT",
                  "#define FAST_OUT",
                  "#endif",
                  "#endif",
                  "",
                  "\tnamespace INPUT",
                  "\t{",
                  "#ifdef FAST_IN",
                  "#ifndef FAST_OUT_BUFFER_SIZE",
                  "#define FAST_OUT_BUFFER_SIZE (1 << 21)",
                  "#endif",
                  "\t\tchar _buf[FAST_OUT_BUFFER_SIZE], *_now = _buf, *_end = _buf;",
                  "#undef getchar",
                  "#define getchar() (_now == _end && (_end = (_now = _buf) + fread(_buf, 1, FAST_OUT_BUFFER_SIZE, stdin), _now == _end) ? EOF : *_now++)",
                  "#else",
                  "#if !defined(WIN32) && !defined(_WIN32)",
                  "#define getchar getchar_unlocked",
                  "#endif",
                  "#endif",
                  "\t\tinline void read(char &_x)",
                  "\t\t{",
                  "\t\t\tchar _s = (char)getchar();",
                  "\t\t\twhile ((_s >= 0x0a && _s <= 0x0d) || (_s == 0x09) || (_s == 0x20))",
                  "\t\t\t\t_s = (char)getchar();",
                  "\t\t\t_x = _s;",
                  "\t\t}",
                  "\t\tinline int read(char *_x)",
                  "\t\t{",
                  "\t\t\tchar _s = (char)getchar();",
                  "\t\t\tint _len = 0;",
                  "\t\t\twhile ((_s >= 0x0a && _s <= 0x0d) || (_s == 0x09) || (_s == 0x20))",
                  "\t\t\t\t_s = (char)getchar();",
                  "\t\t\twhile (!((_s >= 0x0a && _s <= 0x0d) || (_s == 0x09) || (_s == 0x20)) && _s != EOF)",
                  "\t\t\t{",
                  "\t\t\t\t_x[_len++] = _s;",
                  "\t\t\t\t_s = (char)getchar();",
                  "\t\t\t}",
                  "\t\t\t_x[_len] = '\\0';",
                  "\t\t\treturn _len;",
                  "\t\t}",
                  "\t\ttemplate <typename _T>",
                  "\t\tinline void read(_T &_x)",
                  "\t\t{",
                  "\t\t\t_x = 0;",
                  "\t\t\tchar _s = (char)getchar();",
                  "\t\t\tbool _f = false;",
                  "\t\t\twhile (!(_s >= '0' && _s <= '9'))",
                  "\t\t\t{",
                  "\t\t\t\tif (_s == '-')",
                  "\t\t\t\t\t_f = true;",
                  "\t\t\t\t_s = (char)getchar();",
                  "\t\t\t}",
                  "\t\t\twhile (_s >= '0' && _s <= '9')",
                  "\t\t\t{",
                  "\t\t\t\t_x = (_x << 1) + (_x << 3) + (_s - '0');",
                  "\t\t\t\t_s = (char)getchar();",
                  "\t\t\t}",
                  "\t\t\tif (_f)",
                  "\t\t\t\t_x = -_x;",
                  "\t\t}",
                  "\t\ttemplate <typename _T, typename... _G>",
                  "\t\tinline void read(_T &_x, _G &..._y)",
                  "\t\t{",
                  "\t\t\tread(_x);",
                  "\t\t\tread(_y...);",
                  "\t\t}",
                  "#ifdef FAST_IN",
                  "#undef getchar",
                  "#if !defined(WIN32) && !defined(_WIN32)",
                  "#define getchar getchar_unlocked",
                  "#endif",
                  "#endif",
                  "\t}",
                  "\tnamespace OUTPUT",
                  "\t{",
                  "#ifdef FAST_OUT",
                  "#ifndef FAST_OUT_BUFFER_SIZE",
                  "#define FAST_OUT_BUFFER_SIZE (1 << 21)",
                  "#endif",
                  "\t\tchar _buf[FAST_OUT_BUFFER_SIZE], *_now = _buf;",
                  "\t\tinline void flush()",
                  "\t\t{",
                  "\t\t\tfwrite(_buf, 1, _now - _buf, stdout), _now = _buf;",
                  "\t\t}",
                  "#undef putchar",
                  "#define putchar(c) (_now - _buf == FAST_OUT_BUFFER_SIZE ? flush(), *_now++ = c : *_now++ = c)",
                  "#else",
                  "#if !defined(WIN32) && !defined(_WIN32)",
                  "#define putchar putchar_unlocked",
                  "#endif",
                  "#endif",
                  "\t\tinline void write(char _x)",
                  "\t\t{",
                  "\t\t\tputchar(_x);",
                  "\t\t}",
                  "\t\tinline void write(char *const _x)",
                  "\t\t{",
                  "\t\t\tfor (int i = 0; _x[i]; ++i)",
                  "\t\t\t\tputchar(_x[i]);",
                  "\t\t}",
                  "\t\tinline void write(const char *__restrict _x)",
                  "\t\t{",
                  "\t\t\tfor (int i = 0; _x[i]; ++i)",
                  "\t\t\t\tputchar(_x[i]);",
                  "\t\t}",
                  "\t\ttemplate <typename _T>",
                  "\t\tinline void write(_T _x)",
                  "\t\t{",
                  "\t\t\tstatic char dight[39];",
                  "\t\t\tint _len = 0;",
                  "\t\t\tif (_x == 0)",
                  "\t\t\t{",
                  "\t\t\t\tputchar('0');",
                  "\t\t\t\treturn;",
                  "\t\t\t}",
                  "\t\t\tbool flag = false;",
                  "\t\t\tif (_x < 0)",
                  "\t\t\t{",
                  "\t\t\t\t_x = -_x;",
                  "\t\t\t\tflag = true;",
                  "\t\t\t}",
                  "\t\t\twhile (_x)",
                  "\t\t\t{",
                  "\t\t\t\tdight[_len++] = (char)(_x % 10) + '0';",
                  "\t\t\t\t_x /= 10;",
                  "\t\t\t}",
                  "\t\t\tif (flag)",
                  "\t\t\t\tputchar('-');",
                  "\t\t\twhile (_len--)",
                  "\t\t\t\tputchar(dight[_len]);",
                  "\t\t}",
                  "\t\ttemplate <typename _T, typename... _G>",
                  "\t\tinline void write(_T _x, _G... _y)",
                  "\t\t{",
                  "\t\t\twrite(_x);",
                  "\t\t\twrite(_y...);",
                  "\t\t}",
                  "#ifdef FAST_OUT",
                  "#undef putchar",
                  "#if !defined(WIN32) && !defined(_WIN32)",
                  "#define putchar putchar_unlocked",
                  "#endif",
                  "#endif",
                  "\t}",
                  "}",
                  "template <typename T>",
                  "inline void ckmin(T &_x, T _y)",
                  "{",
                  "\tif (_x > _y)",
                  "\t\t_x = _y;",
                  "}",
                  "template <typename T>",
                  "inline void ckmax(T &_x, T _y)",
                  "{",
                  "\tif (_x < _y)",
                  "\t\t_x = _y;",
                  "}",
                  "namespace MODINT",
                  "{",
                  "\ttemplate <const int _mod>",
                  "\tstruct modint",
                  "\t{",
                  "\t\tint x;",
                  "\t\tconstexpr modint(int _x = 0) : x(_x) {}",
                  "\t\tconstexpr inline modint operator+() const",
                  "\t\t{",
                  "\t\t\treturn *this;",
                  "\t\t}",
                  "\t\tconstexpr inline modint operator-() const",
                  "\t\t{",
                  "\t\t\treturn !x ? 0 : _mod - x;",
                  "\t\t}",
                  "\t\tconstexpr inline modint &operator++()",
                  "\t\t{",
                  "\t\t\t++x;",
                  "\t\t\tif (x >= _mod)",
                  "\t\t\t\tx -= _mod;",
                  "\t\t\treturn *this;",
                  "\t\t}",
                  "\t\tconstexpr inline modint &operator--()",
                  "\t\t{",
                  "\t\t\t--x;",
                  "\t\t\tif (x < 0)",
                  "\t\t\t\tx += _mod;",
                  "\t\t\treturn *this;",
                  "\t\t}",
                  "\t\tconstexpr inline modint operator++(int)",
                  "\t\t{",
                  "\t\t\tint res = x;",
                  "\t\t\tif (x >= _mod)",
                  "\t\t\t\tx -= _mod;",
                  "\t\t\treturn res;",
                  "\t\t}",
                  "\t\tconstexpr inline modint operator--(int)",
                  "\t\t{",
                  "\t\t\tint res = x;",
                  "\t\t\tif (x < 0)",
                  "\t\t\t\tx += _mod;",
                  "\t\t\treturn res;",
                  "\t\t}",
                  "\t\tconstexpr inline modint operator+(const modint &rhs) const",
                  "\t\t{",
                  "\t\t\tint res = x;",
                  "\t\t\tres += rhs.x;",
                  "\t\t\tif (res >= _mod)",
                  "\t\t\t\tres -= _mod;",
                  "\t\t\treturn res;",
                  "\t\t}",
                  "\t\tconstexpr inline modint operator-(const modint &rhs) const",
                  "\t\t{",
                  "\t\t\tint res = x;",
                  "\t\t\tres -= rhs.x;",
                  "\t\t\tif (res < 0)",
                  "\t\t\t\tres += _mod;",
                  "\t\t\treturn res;",
                  "\t\t}",
                  "\t\tconstexpr inline modint operator*(const modint &rhs) const",
                  "\t\t{",
                  "\t\t\treturn (int)((ll)x * rhs.x % _mod);",
                  "\t\t}",
                  "\t\tconstexpr inline modint &operator+=(const modint &rhs)",
                  "\t\t{",
                  "\t\t\tx += rhs.x;",
                  "\t\t\tif (x >= _mod)",
                  "\t\t\t\tx -= _mod;",
                  "\t\t\treturn *this;",
                  "\t\t}",
                  "\t\tconstexpr inline modint &operator-=(const modint &rhs)",
                  "\t\t{",
                  "\t\t\tx -= rhs.x;",
                  "\t\t\tif (x < 0)",
                  "\t\t\t\tx += _mod;",
                  "\t\t\treturn *this;",
                  "\t\t}",
                  "\t\tconstexpr inline modint &operator*=(const modint &rhs)",
                  "\t\t{",
                  "\t\t\tx = (int)((ll)x * rhs.x % _mod);",
                  "\t\t\treturn *this;",
                  "\t\t}",
                  "\t\ttemplate <typename _G>",
                  "\t\tconstexpr inline modint operator^(_G rhs) const",
                  "\t\t{",
                  "\t\t\tmodint a = x, res = 1;",
                  "\t\t\twhile (rhs)",
                  "\t\t\t{",
                  "\t\t\t\tif (rhs & 1)",
                  "\t\t\t\t\tres *= a;",
                  "\t\t\t\ta *= a;",
                  "\t\t\t\trhs >>= 1;",
                  "\t\t\t}",
                  "\t\t\treturn res;",
                  "\t\t}",
                  "\t\tconstexpr inline modint inv() const",
                  "\t\t{",
                  "\t\t\treturn *this ^ (_mod - 2);",
                  "\t\t}",
                  "\t\tconstexpr inline modint operator/(const modint &rhs) const",
                  "\t\t{",
                  "\t\t\treturn (*this) * rhs.inv();",
                  "\t\t}",
                  "\t\tconstexpr inline modint &operator/=(const modint &rhs)",
                  "\t\t{",
                  "\t\t\treturn (*this) *= rhs.inv();",
                  "\t\t}",
                  "\t\tconstexpr inline bool operator==(const modint &rhs) const",
                  "\t\t{",
                  "\t\t\treturn x == rhs.x;",
                  "\t\t}",
                  "\t\tconstexpr inline bool operator!=(const modint &rhs) const",
                  "\t\t{",
                  "\t\t\treturn x != rhs.x;",
                  "\t\t}",
                  "\t\tconstexpr inline int &data()",
                  "\t\t{",
                  "\t\t\treturn x;",
                  "\t\t}",
                  "\t};",
                  "}",
                  "using IO::INPUT::read;",
                  "using IO::OUTPUT::write;",
                  "using namespace std;",
                  "$4",
                  "signed main()",
                  "{",
                  "#ifdef FAST_OUT",
                  "\tIO::OUTPUT::flush();",
                  "#endif",
                  "\treturn 0;",
                  "}"
            ],
            "description": "Log output to console"
      }
}
